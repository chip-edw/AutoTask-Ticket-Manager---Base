// <auto-generated />
using System;
using AutoTaskTicketManager_Base.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AutoTaskTicketManager_Base.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250111170452_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.0");

            modelBuilder.Entity("AutoTaskTicketManager_Base.Models.ConfigStore", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ValueName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ValueType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ConfigStore");
                });

            modelBuilder.Entity("AutoTaskTicketManager_Base.Models.CustomerSettings", b =>
                {
                    b.Property<int>("AutotaskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AccountName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("AutoAssign")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("EnableEmail")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Enabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SupportEmail")
                        .HasColumnType("TEXT");

                    b.HasKey("AutotaskId");

                    b.ToTable("CustomerSettings");
                });

            modelBuilder.Entity("AutoTaskTicketManager_Base.Models.Scheduler", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("FrequencyMinutes")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastRunTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("datetime('0001-01-01 00:00:00')");

                    b.Property<DateTime>("NextRunTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("datetime('9999-12-31 23:59:59')");

                    b.Property<string>("Period")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("TaskActive")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TaskID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TaskName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Schedulers");
                });
#pragma warning restore 612, 618
        }
    }
}
